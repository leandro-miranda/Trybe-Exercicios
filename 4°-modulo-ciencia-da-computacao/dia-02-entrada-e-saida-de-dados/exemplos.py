# import http  # importa o pacote http como um m√≥dulo

# from http import client  # importa o m√≥dulo client do pacote http

# from http.client import HTTP_PORT
# importa a constante HTTP_POST do m√≥dulo client do pacote http


# def sum(a, b):
#     return a + b


# def pot(a, b):
#     return a ** b


# print(sum(2, 2))
# print(pot(2, 3))

# input("Digite uma mensagem:")
# print("Mensagem digitada")

# import random

# # escolhe um n√∫mero aleat√≥rio entre 1 e 10
# random_number = random.randint(1, 10)
# guess = ""

# while guess != random_number:  # enquanto n√£o adivinhar o n√∫mero
#     # pergunte a pessoa usu√°ria um n√∫mero
#     guess = int(input("Qual o seu palpite? "))

# print("O n√∫mero sorteado era: ", guess)

# üí° Fazemos uma convers√£o do palpite para um n√∫mero inteiro, pois entrada de
# dados √© sempre str.
# üí° Para rodar o exemplo acima, n√£o crie um arquivo chamado random para inserir
# o c√≥digo, pois o m√≥dulo que estamos importando se chama random e isso pode
# causar um erro! Lembre-se que, para rodar o c√≥digo, voc√™ deve executar o
# comando python3 nome_do_arquivo.py no terminal.


# Outra maneira de recebermos valores externos na execu√ß√£o de nossos programas
# √© utilizando o m√≥dulo sys. Quando executamos um script e adicionamos
# par√¢metros, os mesmos estar√£o dispon√≠veis atrav√©s de uma vari√°vel chamada
# sys.argv, que √© preenchida sem que precisemos fazer nada. Na pr√°tica,
# podemos escrever o conte√∫do abaixo em um arquivo e passar alguns par√¢metros
# ao execut√°-lo.
import sys


if __name__ == "__main__":
    for argument in sys.argv:
        print("Received -> ", argument)


print("O resultado √©", 42)  # sa√≠da: O resultado √© 42
print("Os resultados s√£o", 6, 23, 42)  # sa√≠da: Os resultados s√£o 6 23 42

# O separador padr√£o dos argumentos √© um espa√ßo em branco,
# que pode ser alterado.
# sa√≠da: Maria Jo√£o Miguel Ana
print("Maria", "Jo√£o", "Miguel", "Ana")
# sa√≠da: Maria, Jo√£o, Miguel, Ana
print("Maria", "Jo√£o", "Miguel", "Ana", sep=", ")

# Al√©m do separador, podemos tamb√©m alterar o caractere de fim de linha que,
# por regra, √© uma quebra de linha:
print("Em duas ")
print("linhas.")

# Alterando o padr√£o:
print("Na mesma", end=" ")
print("linha.")


# import sys


# err = "Arquivo n√£o encontrado"
# print(f"Erro aconteceu: {err}", file=sys.stderr)

# üí° Em Python, podemos fazer interpola√ß√£o de vari√°veis e express√µes utilizando
# f-string. Adicionamos um f antes das aspas e o valor de sa√≠da entre chaves.
# Essa dica √© importante, pois √© a maneira mais eficiente de formatar strings.
x = 5
y = 3
print(f"{x} / {y} = {x / y:.2f}")  # sa√≠da: 5 / 3 = 1.67
# {x} √© substitu√≠do por 5
# {y} √© substitu√≠do por 3
# {x / y:.2f} O que vem ap√≥s os dois pontos s√£o formatadores, como nesse
# exemplo, duas casas decimais (.2f).
print(f"{x:.^3}")  # sa√≠da: ".5."
# . √© o caractere utilizado para preencher
# ^ indica que o valor ser√° centralizado
# 3 s√£o o n√∫mero de caracteres exibidos


# O desempacotamento de valores √© um recurso muito √∫til de Python quando
# queremos separar os valores recebidos em vari√°veis diferentes. Quando h√° uma
# atribui√ß√£o m√∫ltipla e o valor da direita pode ser percorrido, o Python
# entende que deve atribuir cada um dos valores a uma vari√°vel da esquerda,
# seguindo a ordem. Vejamos no exemplo abaixo:

# üí° Execute o c√≥digo abaixo para que voc√™ veja os valores printados e entenda
# melhor o funcionamento.
a, b = "cd"
print(a)  # sa√≠da: c
print(b)  # sa√≠da: d
# Quando um * est√° presente no desempacotamento, os valores s√£o desempacotados
# em formato de lista.
head, *tail = (1, 2, 3)
print(head)  # sa√≠da: 1
print(tail)  # sa√≠da: [2, 3]

# A fun√ß√£o open √© a respons√°vel por abrir um arquivo, tornando poss√≠vel sua
# manipula√ß√£o. Seu √∫nico par√¢metro obrigat√≥rio √© o nome do arquivo. Por padr√£o,
# arquivos s√£o abertos somente para leitura, mas podemos modificar isto
# passando o modo com que vamos abrir o arquivo. No exemplo abaixo, estamos
# utilizando mode="w", ou seja, estamos abrindo o arquivo para escrita:
# ao abrir um arquivo para escrita, um novo arquivo √© criado mesmo que ele j√°
# exista, sobrescrevendo o antigo.
file = open("arquivo.txt", mode="w")
# Para escrevermos um conte√∫do em um arquivo utilizamos a fun√ß√£o write:
file.write('nome idade\n')
file.write('Jo√£o 20\n')
file.write('Maria 25\n')
# üí° S√≥ √© poss√≠vel escrever em um arquivo ap√≥s abri-lo em um modo que permita
# escrita.
# N√£o precisa da quebra de linha, pois esse √© um comportamento padr√£o do print
print("T√∫lio 22", file=file)
# Para escrever m√∫ltiplas linhas podemos utilizar a fun√ß√£o writelines. Repare
# que a fun√ß√£o espera que cada linha tenha seu pr√≥prio caractere de
# separa√ß√£o (\n):
LINES = ["Alberto 35\n", "Betina 22\n", "Jo√£o 42\n", "Victor 19\n"]
file.writelines(LINES)
file.close()
# A leitura do conte√∫do de um arquivo pode ser feita utilizando a fun√ß√£o read.
# Para experimentar, vamos escrever em um arquivo e l√™-lo logo em seguida!
# escrita
file = open("arquivo.txt", mode="w")
file.write("Trybe S2")
file.close()

# leitura
file = open("arquivo.txt", mode="r")
content = file.read()
print(content)
file.close()  # n√£o podemos esquecer de fechar o arquivo


# Um arquivo √© tamb√©m um iter√°vel, ou seja, pode ser percorrido em um la√ßo de
# repeti√ß√£o. A cada itera√ß√£o, uma nova linha √© retornada. Vamos fazer igual ao
# exemplo anterior, por√©m dessa vez vamos escrever mais de uma linha!
# escrita
file = open("arquivo.txt", mode="w")
LINES = ["Ol√°\n", "mundo\n", "belo\n", "do\n", "Python\n"]
file.writelines(LINES)
file.close()

# leitura
file = open("arquivo.txt", mode="r")
for line in file:
    # n√£o esque√ßa que a quebra de linha tamb√©m √© um caractere da linha
    print(line)
file.close()  # n√£o podemos esquecer de fechar o arquivo


# Al√©m de arquivos textuais (como os que manipulamos at√© agora), tamb√©m existem
# arquivos bin√°rios. Eles s√£o arquivos que cont√™m uma s√©rie de bytes e a sua
# leitura pode variar de acordo com o arquivo. Nesse caso, devemos acrescentar
# um b ao par√¢metro mode, indicando que ser√° utilizado o modo bin√°rio.

# As opera√ß√µes s√£o similares a de um arquivo textual. Por√©m tanto a escrita
# quanto a leitura devem ser feitas utilizando bytes.

# escrita
file = open("arquivo.dat", mode="wb")
# o prefixo b em uma string indica que seu valor est√° codificado em bytes
file.write(b"C\xc3\xa1ssio 30")
file.close()

# leitura
file = open("arquivo.dat", mode="rb")
content = file.read()
print(content)  # sa√≠da: b'C\xc3\xa1ssio 30'
file.close()  # n√£o podemos esquecer de fechar o arquivo


# Erros de Sintaxe
# Erros de sintaxe ocorrem quando o c√≥digo utiliza recursos inexistentes da
# linguagem que n√£o consegue interpret√°-los. √â como executar
# print{"Ol√°, mundo!"} em vez de print("Ol√°, mundo!").

# Exce√ß√µes
# J√° as exce√ß√µes ocorrem durante a execu√ß√£o e resultam em mensagem de erro.
# Veja exemplos de exce√ß√µes:
# print(10 * (1 / 0))
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# ZeroDivisionError: division by zero
# print(4 + spam * 3)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'spam' is not defined
# print('2' + 2)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: can only concatenate str (not "int") to str

# Tratamento de exce√ß√µes
# Para tratar exce√ß√µes utilizamos o conjunto de instru√ß√µes try, com as palavras
# reservadas try e except. O funcionamento dessa cl√°usula ocorre da seguinte
# forma:

# Se nenhuma exce√ß√£o ocorrer, a cl√°usula except √© ignorada e a execu√ß√£o da
# instru√ß√£o try √© finalizada.
# Se ocorrer uma exce√ß√£o durante a execu√ß√£o da cl√°usula try, as instru√ß√µes
# remanescentes na cl√°usula s√£o ignoradas. Se o tipo da exce√ß√£o ocorrida tiver
# sido previsto em algum except, ent√£o essa cl√°usula ser√° executada.
# Se n√£o existir nenhum tratador previsto para tal exce√ß√£o, trata-se de uma
# exce√ß√£o n√£o tratada e a execu√ß√£o do programa termina com uma mensagem de
# erro. Vamos agora ver um exemplo de tratamento de exce√ß√µes:
while True:
    try:
        x = int(input("Please enter a number: "))
        break
    except ValueError:
        print("Oops!  That was no valid number.  Try again...")


# Lidando com exce√ß√µes enquanto manipulamos arquivos
# Vamos ver agora como podemos nos prevenir de poss√≠veis erros que ocorrem
# quando manipulamos arquivos. Sempre devemos fechar um arquivo e podemos,
# em um bloco try, fazer isso utilizando a instru√ß√£o finally ou else. O finally
# √© uma outra cl√°usula do conjunto try, cuja finalidade √© permitir a
# implementa√ß√£o de a√ß√µes de limpeza, que sempre devem ser executadas
# independentemente da ocorr√™ncia de a√ß√µes. J√° o else ocorre sempre que todo o
# try for bem sucedido.
try:
    arquivo = open("arquivo.txt", "r")
except OSError:
    # ser√° executado caso haja uma exce√ß√£o
    print("arquivo inexistente")
else:
    # ser√° executado se tudo ocorrer bem no try
    print("arquivo manipulado e fechado com sucesso")
    arquivo.close()
finally:
    # ser√° sempre executado, independentemente de erro
    print("Tentativa de abrir arquivo")
# Como estamos abrindo o arquivo em modo de leitura, uma exce√ß√£o ser√° levantada
# caso ele n√£o exista, executando as cl√°usulas except e finally. Entretanto, se
# alterarmos o modo para escrita, o arquivo ser√° criado mesmo se inexistente,
# executando as cl√°usulas else e finally.


# O with √© a palavra reservada para gerenciamento de contexto.
# Este gerenciamento (with) √© utilizado para encapsular a utiliza√ß√£o de um
# recurso, garantindo que certas a√ß√µes sejam tomadas independentemente se
# ocorreu ou n√£o um erro naquele contexto.

# A fun√ß√£o open retorna um objeto que se comporta como um gerenciador de
# contexto de arquivo que ser√° respons√°vel por abrir e fechar o mesmo.
# Isto significa que o arquivo possui mecanismos especiais que, quando
# invocados utilizando with, alocam um determinado recurso ‚Äî um arquivo ‚Äî e o
# liberam quando o bloco for finalizado.
# Criamos um contexto, limitando o escopo onde o arquivo est√° aberto.
# O uso do "as" aqui √© somente para atribuir o valor utilizado no contexto √†
# vari√°vel file
with open("arquivo.txt", "w") as file:
    file.write("Michelle 27\n")
# como estamos fora do contexto, o arquivo foi fechado
print(file.closed)
# üí° J√° vimos a utiliza√ß√£o de gerenciadores de contexto em testes. L√°,
# capturamos exce√ß√µes que ocorrem e verificamos se naquele contexto a exce√ß√£o
# lan√ßada era a esperada. N√£o h√° um recurso a ser liberado, mas estamos
# garantindo que uma asser√ß√£o ser√° feita naquele contexto.
